package com.joyveb.cashmanage.mapper;

import com.joyveb.cashmanage.entity.LogMoney;
import com.joyveb.cashmanage.entity.LogMoneyExample;
import com.joyveb.cashmanage.entity.LogMoneyExample.Criteria;
import com.joyveb.cashmanage.entity.LogMoneyExample.Criterion;

import java.util.List;
import java.util.Map;

import static org.apache.ibatis.jdbc.SqlBuilder.*;

public class LogMoneySqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String countByExample(LogMoneyExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("t_log_money");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String deleteByExample(LogMoneyExample example) {
        BEGIN();
        DELETE_FROM("t_log_money");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String insertSelective(LogMoney record) {
        BEGIN();
        INSERT_INTO("t_log_money");
        
        if (record.getUuid() != null) {
            VALUES("UUID", "#{uuid,jdbcType=VARCHAR}");
        }
        
        if (record.getParentname() != null) {
            VALUES("PARENTNAME", "#{parentname,jdbcType=VARCHAR}");
        }
        
        if (record.getAlipaynum() != null) {
            VALUES("ALIPAYNUM", "#{alipaynum,jdbcType=VARCHAR}");
        }
        
        if (record.getExtractmoney() != null) {
            VALUES("EXTRACTMONEY", "#{extractmoney,jdbcType=DECIMAL}");
        }
        
        if (record.getResiduemoney() != null) {
            VALUES("RESIDUEMONEY", "#{residuemoney,jdbcType=DECIMAL}");
        }
        
        if (record.getStatus() != null) {
            VALUES("STATUS", "#{status,jdbcType=CHAR}");
        }
        
        if (record.getFailreason() != null) {
            VALUES("FAILREASON", "#{failreason,jdbcType=VARCHAR}");
        }
        
        if (record.getExtracttime() != null) {
            VALUES("EXTRACTTIME", "#{extracttime,jdbcType=BIGINT}");
        }
        
        if (record.getDate() != null) {
            VALUES("DATE", "#{date,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String selectByExample(LogMoneyExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("UUID");
        } else {
            SELECT("UUID");
        }
        SELECT("PARENTNAME");
        SELECT("ALIPAYNUM");
        SELECT("EXTRACTMONEY");
        SELECT("RESIDUEMONEY");
        SELECT("STATUS");
        SELECT("FAILREASON");
        SELECT("EXTRACTTIME");
        SELECT("DATE");
        FROM("t_log_money");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example != null){
            return SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        LogMoney record = (LogMoney) parameter.get("record");
        LogMoneyExample example = (LogMoneyExample) parameter.get("example");
        
        BEGIN();
        UPDATE("t_log_money");
        
        if (record!=null && record.getUuid() != null) {
            SET("UUID = #{record.uuid,jdbcType=VARCHAR}");
        }
        
        if (record!=null && record.getParentname() != null) {
            SET("PARENTNAME = #{record.parentname,jdbcType=VARCHAR}");
        }
        
        if (record!=null && record.getAlipaynum() != null) {
            SET("ALIPAYNUM = #{record.alipaynum,jdbcType=VARCHAR}");
        }
        
        if (record!=null && record.getExtractmoney() != null) {
            SET("EXTRACTMONEY = #{record.extractmoney,jdbcType=DECIMAL}");
        }
        
        if (record!=null && record.getResiduemoney() != null) {
            SET("RESIDUEMONEY = #{record.residuemoney,jdbcType=DECIMAL}");
        }
        
        if (record!=null && record.getStatus() != null) {
            SET("STATUS = #{record.status,jdbcType=CHAR}");
        }
        
        if (record!=null && record.getFailreason() != null) {
            SET("FAILREASON = #{record.failreason,jdbcType=VARCHAR}");
        }
        
        if (record!=null && record.getExtracttime() != null) {
            SET("EXTRACTTIME = #{record.extracttime,jdbcType=BIGINT}");
        }
        
        if (record!=null && record.getDate() != null) {
            SET("DATE = #{record.date,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("t_log_money");
        
        SET("UUID = #{record.uuid,jdbcType=VARCHAR}");
        SET("PARENTNAME = #{record.parentname,jdbcType=VARCHAR}");
        SET("ALIPAYNUM = #{record.alipaynum,jdbcType=VARCHAR}");
        SET("EXTRACTMONEY = #{record.extractmoney,jdbcType=DECIMAL}");
        SET("RESIDUEMONEY = #{record.residuemoney,jdbcType=DECIMAL}");
        SET("STATUS = #{record.status,jdbcType=CHAR}");
        SET("FAILREASON = #{record.failreason,jdbcType=VARCHAR}");
        SET("EXTRACTTIME = #{record.extracttime,jdbcType=BIGINT}");
        SET("DATE = #{record.date,jdbcType=VARCHAR}");
        
        LogMoneyExample example = (LogMoneyExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    public String updateByPrimaryKeySelective(LogMoney record) {
        BEGIN();
        UPDATE("t_log_money");
        
        if (record.getParentname() != null) {
            SET("PARENTNAME = #{parentname,jdbcType=VARCHAR}");
        }
        
        if (record.getAlipaynum() != null) {
            SET("ALIPAYNUM = #{alipaynum,jdbcType=VARCHAR}");
        }
        
        if (record.getExtractmoney() != null) {
            SET("EXTRACTMONEY = #{extractmoney,jdbcType=DECIMAL}");
        }
        
        if (record.getResiduemoney() != null) {
            SET("RESIDUEMONEY = #{residuemoney,jdbcType=DECIMAL}");
        }
        
        if (record.getStatus() != null) {
            SET("STATUS = #{status,jdbcType=CHAR}");
        }
        
        if (record.getFailreason() != null) {
            SET("FAILREASON = #{failreason,jdbcType=VARCHAR}");
        }
        
        if (record.getExtracttime() != null) {
            SET("EXTRACTTIME = #{extracttime,jdbcType=BIGINT}");
        }
        
        if (record.getDate() != null) {
            SET("DATE = #{date,jdbcType=VARCHAR}");
        }
        
        WHERE("UUID = #{uuid,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_log_money
     *
     * @mbggenerated Sun Aug 20 17:51:59 CST 2017
     */
    protected void applyWhere(LogMoneyExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}