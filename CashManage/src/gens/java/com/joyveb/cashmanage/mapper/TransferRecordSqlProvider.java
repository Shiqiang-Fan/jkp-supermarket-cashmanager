package com.joyveb.cashmanage.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.joyveb.cashmanage.entity.TransferRecord;
import com.joyveb.cashmanage.entity.TransferRecordExample.Criteria;
import com.joyveb.cashmanage.entity.TransferRecordExample.Criterion;
import com.joyveb.cashmanage.entity.TransferRecordExample;
import java.util.List;
import java.util.Map;

public class TransferRecordSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String countByExample(TransferRecordExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("t_acc_transferrecord");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String deleteByExample(TransferRecordExample example) {
        BEGIN();
        DELETE_FROM("t_acc_transferrecord");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String insertSelective(TransferRecord record) {
        BEGIN();
        INSERT_INTO("t_acc_transferrecord");
        
        if (record.getOuttradenum() != null) {
            VALUES("OUTTRADENUM", "#{outtradenum,jdbcType=VARCHAR}");
        }
        
        if (record.getTransfertype() != null) {
            VALUES("TRANSFERTYPE", "#{transfertype,jdbcType=CHAR}");
        }
        
        if (record.getTransferout() != null) {
            VALUES("TRANSFEROUT", "#{transferout,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferin() != null) {
            VALUES("TRANSFERIN", "#{transferin,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferamount() != null) {
            VALUES("TRANSFERAMOUNT", "#{transferamount,jdbcType=DECIMAL}");
        }
        
        if (record.getFactorage() != null) {
            VALUES("FACTORAGE", "#{factorage,jdbcType=DECIMAL}");
        }
        
        if (record.getStatus() != null) {
            VALUES("STATUS", "#{status,jdbcType=CHAR}");
        }
        
        if (record.getTradenum() != null) {
            VALUES("TRADENUM", "#{tradenum,jdbcType=VARCHAR}");
        }
        
        if (record.getMessageids() != null) {
            VALUES("MESSAGEIDS", "#{messageids,jdbcType=VARCHAR}");
        }
        
        if (record.getTransfertime() != null) {
            VALUES("TRANSFERTIME", "#{transfertime,jdbcType=BIGINT}");
        }
        
        if (record.getFailreason() != null) {
            VALUES("FAILREASON", "#{failreason,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String selectByExample(TransferRecordExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("OUTTRADENUM");
        } else {
            SELECT("OUTTRADENUM");
        }
        SELECT("TRANSFERTYPE");
        SELECT("TRANSFEROUT");
        SELECT("TRANSFERIN");
        SELECT("TRANSFERAMOUNT");
        SELECT("FACTORAGE");
        SELECT("STATUS");
        SELECT("TRADENUM");
        SELECT("MESSAGEIDS");
        SELECT("TRANSFERTIME");
        SELECT("FAILREASON");
        FROM("t_acc_transferrecord");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example != null){
            return SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TransferRecord record = (TransferRecord) parameter.get("record");
        TransferRecordExample example = (TransferRecordExample) parameter.get("example");
        
        BEGIN();
        UPDATE("t_acc_transferrecord");
        
        if (record.getOuttradenum() != null) {
            SET("OUTTRADENUM = #{record.outtradenum,jdbcType=VARCHAR}");
        }
        
        if (record.getTransfertype() != null) {
            SET("TRANSFERTYPE = #{record.transfertype,jdbcType=CHAR}");
        }
        
        if (record.getTransferout() != null) {
            SET("TRANSFEROUT = #{record.transferout,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferin() != null) {
            SET("TRANSFERIN = #{record.transferin,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferamount() != null) {
            SET("TRANSFERAMOUNT = #{record.transferamount,jdbcType=DECIMAL}");
        }
        
        if (record.getFactorage() != null) {
            SET("FACTORAGE = #{record.factorage,jdbcType=DECIMAL}");
        }
        
        if (record.getStatus() != null) {
            SET("STATUS = #{record.status,jdbcType=CHAR}");
        }
        
        if (record.getTradenum() != null) {
            SET("TRADENUM = #{record.tradenum,jdbcType=VARCHAR}");
        }
        
        if (record.getMessageids() != null) {
            SET("MESSAGEIDS = #{record.messageids,jdbcType=VARCHAR}");
        }
        
        if (record.getTransfertime() != null) {
            SET("TRANSFERTIME = #{record.transfertime,jdbcType=BIGINT}");
        }
        
        if (record.getFailreason() != null) {
            SET("FAILREASON = #{record.failreason,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("t_acc_transferrecord");
        
        SET("OUTTRADENUM = #{record.outtradenum,jdbcType=VARCHAR}");
        SET("TRANSFERTYPE = #{record.transfertype,jdbcType=CHAR}");
        SET("TRANSFEROUT = #{record.transferout,jdbcType=VARCHAR}");
        SET("TRANSFERIN = #{record.transferin,jdbcType=VARCHAR}");
        SET("TRANSFERAMOUNT = #{record.transferamount,jdbcType=DECIMAL}");
        SET("FACTORAGE = #{record.factorage,jdbcType=DECIMAL}");
        SET("STATUS = #{record.status,jdbcType=CHAR}");
        SET("TRADENUM = #{record.tradenum,jdbcType=VARCHAR}");
        SET("MESSAGEIDS = #{record.messageids,jdbcType=VARCHAR}");
        SET("TRANSFERTIME = #{record.transfertime,jdbcType=BIGINT}");
        SET("FAILREASON = #{record.failreason,jdbcType=VARCHAR}");
        
        TransferRecordExample example = (TransferRecordExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    public String updateByPrimaryKeySelective(TransferRecord record) {
        BEGIN();
        UPDATE("t_acc_transferrecord");
        
        if (record.getTransfertype() != null) {
            SET("TRANSFERTYPE = #{transfertype,jdbcType=CHAR}");
        }
        
        if (record.getTransferout() != null) {
            SET("TRANSFEROUT = #{transferout,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferin() != null) {
            SET("TRANSFERIN = #{transferin,jdbcType=VARCHAR}");
        }
        
        if (record.getTransferamount() != null) {
            SET("TRANSFERAMOUNT = #{transferamount,jdbcType=DECIMAL}");
        }
        
        if (record.getFactorage() != null) {
            SET("FACTORAGE = #{factorage,jdbcType=DECIMAL}");
        }
        
        if (record.getStatus() != null) {
            SET("STATUS = #{status,jdbcType=CHAR}");
        }
        
        if (record.getTradenum() != null) {
            SET("TRADENUM = #{tradenum,jdbcType=VARCHAR}");
        }
        
        if (record.getMessageids() != null) {
            SET("MESSAGEIDS = #{messageids,jdbcType=VARCHAR}");
        }
        
        if (record.getTransfertime() != null) {
            SET("TRANSFERTIME = #{transfertime,jdbcType=BIGINT}");
        }
        
        if (record.getFailreason() != null) {
            SET("FAILREASON = #{failreason,jdbcType=VARCHAR}");
        }
        
        WHERE("OUTTRADENUM = #{outtradenum,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_acc_transferrecord
     *
     * @mbggenerated Fri Mar 10 15:45:26 CST 2017
     */
    protected void applyWhere(TransferRecordExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}